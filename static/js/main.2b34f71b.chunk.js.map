{"version":3,"sources":["actions/PageActions.js","reducers/page.js","actions/UserActions.js","reducers/user.js","reducers/index.js","store/configureStore.js","components/User.js","containers/UserContainer.js","components/Page.js","containers/PageContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["GET_PHOTOS_REQUEST","GET_PHOTOS_SUCCESS","GET_PHOTOS_FAIL","photosArr","cached","makeYearPhotos","photos","selectedYear","yearPhotos","forEach","item","Date","date","getFullYear","push","sort","a","b","likes","count","getPhotos","year","dispatch","type","payload","getMorePhotos","offset","VK","Api","call","extended","v","r","concat","response","items","e","error","Error","initialState","isFetching","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","name","rootReducer","combineReducers","page","state","arguments","length","undefined","action","Object","objectSpread","message","user","store","createStore","applyMiddleware","thunk","User","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","apply","renderTemplate","_this$props","props","react_default","createElement","className","onClick","handleLogin","inherits","createClass","key","value","React","Component","UserContainer","User_User","connect","Auth","login","session","username","first_name","Page","onBtnClick","currentTarget","innerText","renderButtons","map","index","entry","id","src","sizes","url","alt","_this$props2","PageContainer","Page_Page","App","containers_PageContainer","containers_UserContainer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","es","components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2b34f71b.chunk.js","sourcesContent":["export const GET_PHOTOS_REQUEST = 'GET_PHOTOS_REQUEST';\r\nexport const GET_PHOTOS_SUCCESS = 'GET_PHOTOS_SUCCESS';\r\nexport const GET_PHOTOS_FAIL = 'GET_PHOTOS_FAIL';\r\n\r\nlet photosArr = [];\r\nlet cached = false;\r\n\r\nfunction makeYearPhotos(photos, selectedYear) {\r\n  let createdYear, yearPhotos = [];\r\n\r\n  photos.forEach(item => {\r\n    createdYear = new Date(item.date * 1000).getFullYear();\r\n    if (createdYear === selectedYear) {\r\n      yearPhotos.push(item);\r\n    }\r\n  });\r\n  yearPhotos.sort((a, b) => b.likes.count - a.likes.count);\r\n  return yearPhotos;\r\n}\r\n\r\nfunction getMorePhotos(offset, count, year, dispatch) {\r\n  //eslint-disable-next-line no-undef\r\n  VK.Api.call(\r\n    'photos.getAll',\r\n    { extended: 1, count: count, offset: offset, v: '5.80' },\r\n    r => {\r\n      try {\r\n        photosArr = photosArr.concat(r.response.items);\r\n        if (offset <= r.response.count) {\r\n          offset += 200; // максимальное количество фото которое можно получить за 1 запрос\r\n          getMorePhotos(offset, count, year, dispatch);\r\n        } else {\r\n          let photos = makeYearPhotos(photosArr, year);\r\n          cached = true;\r\n          dispatch({\r\n            type: GET_PHOTOS_SUCCESS,\r\n            payload: photos,\r\n          });\r\n        }\r\n      } catch (e) {\r\n        dispatch({\r\n          type: GET_PHOTOS_FAIL,\r\n          error: true,\r\n          payload: new Error(e),\r\n        });\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport function getPhotos(year) {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: GET_PHOTOS_REQUEST,\r\n      payload: year,\r\n    });\r\n\r\n    if (cached) {\r\n      let photos = makeYearPhotos(photosArr, year);\r\n      dispatch({\r\n        type: GET_PHOTOS_SUCCESS,\r\n        payload: photos,\r\n      });\r\n    } else {\r\n      getMorePhotos(0, 200, year, dispatch);\r\n    }\r\n  }\r\n}","import {\r\n  GET_PHOTOS_REQUEST,\r\n  GET_PHOTOS_SUCCESS,\r\n  GET_PHOTOS_FAIL,\r\n} from '../actions/PageActions';\r\n\r\nconst initialState = {\r\n  year: 2018,\r\n  photos: [],\r\n  isFetching: false,\r\n  error: '',\r\n};\r\n\r\nexport function pageReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_PHOTOS_REQUEST:\r\n      return { ...state, year: action.payload, isFetching: true, error: '' };\r\n\r\n    case GET_PHOTOS_SUCCESS:\r\n      return { ...state, photos: action.payload, isFetching: false, error: '' };\r\n\r\n    case GET_PHOTOS_FAIL:\r\n      return { ...state, error: action.payload.message, isFetching: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};","export const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\n\r\nexport function handleLogin() {\r\n  return function(dispatch) {\r\n    dispatch({\r\n      type: LOGIN_REQUEST,\r\n    })\r\n\r\n    //eslint-disable-next-line no-undef\r\n    VK.Auth.login(r => {\r\n      if (r.session) {\r\n        let username = r.session.user.first_name;\r\n\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n          payload: username,\r\n        });\r\n\r\n      } else {\r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n          error: true,\r\n          payload: new Error('Ошибка авторизации'),\r\n        });\r\n      }\r\n    }, 4); // запрос прав на доступ к photo\r\n  }\r\n}","import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL } from '../actions/UserActions';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  error: '', // добавили для сохранения текста ошибки\r\n  isFetching: false, // добавили для реакции на статус \"загружаю\" или нет\r\n};\r\n\r\nexport function userReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST:\r\n      return { ...state, isFetching: true, error: '' };\r\n\r\n    case LOGIN_SUCCESS:\r\n      return { ...state, isFetching: false, name: action.payload, error: '' };\r\n\r\n    case LOGIN_FAIL:\r\n      return { ...state, isFetching: false, error: action.payload.message };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport { pageReducer } from './page';\r\nimport { userReducer } from './user';\r\n\r\nexport const rootReducer = combineReducers({\r\n  page: pageReducer,\r\n  user: userReducer,\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { rootReducer } from '../reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class User extends React.Component {\r\n  renderTemplate = () => {\r\n    const { name, error, isFetching } = this.props;\r\n\r\n    if (error) {\r\n      return (<p>Во время запроса произошла ошибка, обновите страницу</p>);\r\n    }\r\n\r\n    if (isFetching) {\r\n      return (<p>Загружаю...</p>);\r\n    }\r\n\r\n    if (name) {\r\n      return (<p>Привет, {name}!</p>);\r\n    } else {\r\n      return (\r\n        <button className=\"btn\" onClick={this.props.handleLogin}>\r\n          Войти\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n  render() {\r\n    return <div className=\"ib user\">{this.renderTemplate()}</div>\r\n  }\r\n}\r\n\r\nUser.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  error: PropTypes.string,\r\n  isFetching: PropTypes.bool.isRequired,\r\n  handleLogin: PropTypes.func.isRequired,\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { User } from '../components/User';\r\nimport { handleLogin } from '../actions/UserActions';\r\n\r\nclass UserContainer extends React.Component {\r\n  render() {\r\n    const { user, handleLogin } = this.props;\r\n    return (\r\n      <User\r\n        name={user.name}\r\n        error={user.error}\r\n        isFetching={user.isFetching}\r\n        handleLogin={handleLogin}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    user: store.user,\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleLogin: () => dispatch(handleLogin()),\r\n  }\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Page extends React.Component {\r\n  onBtnClick = e => {\r\n    const year = +e.currentTarget.innerText;\r\n    this.props.getPhotos(year);\r\n  };\r\n\r\n  renderButtons = () => {\r\n    const years = [2018, 2017, 2016, 2015, 2014];\r\n\r\n    return years.map((item, index) => {\r\n      return (\r\n        <button key={index} className=\"btn\" onClick={this.onBtnClick}>\r\n          {item}\r\n        </button>\r\n      );\r\n    })\r\n  };\r\n\r\n  renderTemplate = () => {\r\n    const { photos, isFetching, error } = this.props;\r\n\r\n    if (error) {\r\n      return (<p className=\"error\">Во время загрузки фото произошла ошибка</p>);\r\n    }\r\n\r\n    if (isFetching) {\r\n      return (<p>Загрузка...</p>);\r\n    } else {\r\n      return photos.map((entry, index) => (\r\n        <div key={entry.id} className=\"photo\">\r\n          <p>\r\n            <img src={entry.sizes[0].url} alt=\"\" />\r\n          </p>\r\n          <p>{entry.likes.count} ❤</p>\r\n        </div>\r\n      ));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { year, photos } = this.props;\r\n    return (\r\n      <div className=\"ib page\">\r\n        <p>{this.renderButtons()}</p>\r\n        <h3>\r\n          {year} год [{photos.length}]\r\n        </h3>\r\n        {this.renderTemplate()}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nPage.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  photos: PropTypes.array.isRequired,\r\n  getPhotos: PropTypes.func.isRequired,\r\n  error: PropTypes.string,\r\n  isFetching: PropTypes.bool.isRequired,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Page } from '../components/Page';\r\nimport { getPhotos } from '../actions/PageActions';\r\n\r\nclass PageContainer extends React.Component {\r\n  render() {\r\n    const { page, getPhotos } = this.props;\r\n    return (\r\n      <Page\r\n        photos={page.photos}\r\n        year={page.year}\r\n        isFetching={page.isFetching}\r\n        error={page.error}\r\n        getPhotos={getPhotos}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    page: store.page,\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getPhotos: year => dispatch(getPhotos(year)),\r\n  }\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PageContainer);","import React, { Component } from 'react';\nimport UserContainer from '../containers/UserContainer';\nimport PageContainer from '../containers/PageContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <PageContainer />\n        <UserContainer />\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/configureStore';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}